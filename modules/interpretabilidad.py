# ------------------------- Dependencias -------------------------
import matplotlib.pyplot as plt
import shap
import streamlit as st
from pyhere import here
import modules.interpretabilidad as itp
from modules.otras_func import *
import pickle
import mapie 
#-----------------------------------------------------------------

@st.cache
def get_shap_clasif(modelo, df):
    try:
        explainer = shap.Explainer(model = modelo, data = df)
        shap_values = explainer.shap_values(df)
    except:
        explainer = shap.KernelExplainer(model = modelo, data = df)
        shap_values = explainer.shap_values(df)
    return [explainer, shap_values]

@st.cache
def get_shap_reg(modelo, df):
    explainer = shap.Explainer(modelo, df)
    shap_values = explainer(df)
    return [explainer, shap_values]


def genera_grafica_shap_clasif(name_plot, shap_values, explainer, df, indice):
    '''
    Description
    ----------
    This plot display some graphs generated by the SHAP values.

    Parameters
    ----------
    name_plot : String.
    shap_values : Numpy array.
    explainer : Explainer previously fitted.
    df : Data frame.
    indice : Number no greater than the daa set size.
    Returns
    -------
    0
    '''
    diccionario_para_texto = {}
    shap.initjs()
    if name_plot == 'beeswarm':
        c1, c2 = st.columns([1,.2])
        with c1:
            plt.figure()
            shap.summary_plot(shap_values[0], df.values, feature_names = df.columns, show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
            
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text")
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales','Beeswarm Plot.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='beetext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto['Beeswarm Plot.png'] = saved_text
            actualiza_diccionario_texto(diccionario_para_texto)
        
        
    elif name_plot == 'bars':
        
        c1, c2 = st.columns([1,.2])
        with c1:        
            plt.figure()
            shap.summary_plot(shap_values[0], df.values, feature_names = df.columns, plot_type="bar", show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text", 1)
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales','Bar Plot.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='bartext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto['Bar Plot.png'] = saved_text
            actualiza_diccionario_texto(diccionario_para_texto)

        
    elif name_plot == 'waterfall':
        n_obs = st.select_slider('Select an observation',
            options= indice, key = 2)
        obs = indice.index(n_obs)
        c1, c2 = st.columns([1,.2])
        with c1:
            plt.figure()
            shap.waterfall_plot(shap.Explanation(values=shap_values[1][obs], 
                                                  base_values=explainer.expected_value[1], data=df.iloc[obs],  
                                              feature_names=df.columns.tolist()), show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text", 3)
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales',f'Waterfall Plot of observation {obs}.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='watertext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto[f'Waterfall Plot of observation {obs}.png'] = saved_text
            st.write(diccionario_para_texto)
            actualiza_diccionario_texto(diccionario_para_texto)
    else:
        st.error('No se seleccionó una gráfica válida.')
    
    
    

def genera_grafica_shap_regression(name_plot, shap_values, indice):
    
    diccionario_para_texto = {}
    shap.initjs()
    if name_plot == 'beeswarm':
        c1, c2 = st.columns([1,.2])
        with c1:
            plt.figure()
            shap.plots.beeswarm(shap_values, show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text")
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales','Beeswarm Plot.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='beetext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto['Beeswarm Plot.png'] = saved_text
            actualiza_diccionario_texto(diccionario_para_texto)

    elif name_plot == 'bars':
        c1, c2 = st.columns([1,.2])
        with c1:
            plt.figure()
            shap.plots.bar(shap_values, show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text", 4)
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales','Bar Plot.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='bartext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto['Bar Plot.png'] = saved_text
            actualiza_diccionario_texto(diccionario_para_texto)
        
    elif name_plot == 'waterfall':
        n_obs = st.select_slider('Select an observation',
            options= indice, key = '1')
        obs = indice.index(n_obs)
        c1, c2 = st.columns([1,.2])
        with c1:
            plt.figure()
            shap.plots.waterfall(shap_values[obs], show = False)
            fig = plt.gcf()
            fig.set_size_inches(18, 8)
            st.pyplot(fig)
        with c2:
            inserta_espacios(15)
            save_plot = st.button("Save plot and text", 5)
            if save_plot:
                fig.savefig(here('otros_insumos', 'imagenes_temporales',f'Waterfall Plot of observation {n_obs}.png'), bbox_inches='tight')
        text_input = st.text_area('Enter your analysis here', key='watertext')
        if save_plot:
            saved_text = text_input
            diccionario_para_texto[f'Waterfall Plot of observation {n_obs}.png'] = saved_text
            st.write(diccionario_para_texto)
            actualiza_diccionario_texto(diccionario_para_texto)

    else:
        st.error('No se seleccionó una gráfica válida.')
    return 0


def general_explainer_clasif(modelo, df, y, indice):
    shap.initjs()
    explainer, shap_values = get_shap_clasif(modelo.predict_proba, df)

    with st.container():
        
        t1, t2, t3 = st.tabs(['Beeswarm', 'Bars', 'Waterfall'])
        
        with t1:
            
            st.markdown("## Beeswarm Plot")
            itp.genera_grafica_shap_clasif('beeswarm', shap_values, explainer, df, indice)

        with t2:
            
            st.markdown("## Bar Plot")
            itp.genera_grafica_shap_clasif('bars', shap_values, explainer, df, indice)
    
        with t3:

            st.markdown("## Waterfall Plot")
            itp.genera_grafica_shap_clasif('waterfall', shap_values, explainer, df, indice)
            
            
def general_explainer_regression(modelo, df, y, indice):
    shap.initjs()
    # explainer = shap.Explainer(modelo, df)
    # shap_values = explainer(df)
    explainer, shap_values = get_shap_reg(modelo, df)

    with st.container():
        
        t1, t2, t3 = st.tabs(['Beeswarm', 'Bars', 'Waterfall'])

        with t1:
            
            st.markdown("## Beeswarm Plot")
            itp.genera_grafica_shap_regression('beeswarm', shap_values, indice)
            
        with t2:
            
            st.markdown("## Bar Plot")
            itp.genera_grafica_shap_regression('bars', shap_values, indice)
            
        with t3:

            st.markdown("## Waterfall Plot")
            itp.genera_grafica_shap_regression('waterfall', shap_values, indice)